image: docker:20.10.22
services:
  - docker:20.10.22-dind

variables:
  api_docker_image: '$CI_REGISTRY/cour-de-cassation/dbsder-api:$CI_COMMIT_SHORT_SHA'

stages:
  - test
  - build
  - deploy

test:
  stage: test
  variables:
    HTTP_PROXY: $HTTP_PROXY_DEV
    HTTPS_PROXY: $HTTPS_PROXY_DEV
  script:
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build
      --build-arg http_proxy=$HTTP_PROXY
      --build-arg https_proxy=$HTTPS_PROXY
      --target test
      -t dbsder-api .
    - docker run -e HTTP_PROXY=$HTTP_PROXY -e HTTPS_PROXY=$HTTPS_PROXY dbsder-api npm run format
    - docker run -e HTTP_PROXY=$HTTP_PROXY -e HTTPS_PROXY=$HTTPS_PROXY dbsder-api npm run lint
    - docker run -e HTTP_PROXY=$HTTP_PROXY -e HTTPS_PROXY=$HTTPS_PROXY dbsder-api npm test
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  tags:
    - docker

build_and_push_api:
  stage: build
  variables:
    HTTP_PROXY: $HTTP_PROXY_DEV
    HTTPS_PROXY: $HTTPS_PROXY_DEV
  script:
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

    # To avoid rebuild existing image when addind tag to a commit
    - |
      if docker pull "$api_docker_image"; then
        echo "Docker image $api_docker_image already exist, skiping build and push."
        exit 0
      fi

    - docker build
      --build-arg http_proxy=$HTTP_PROXY
      --build-arg https_proxy=$HTTPS_PROXY
      --target api
      -t $api_docker_image .
    - docker push $api_docker_image
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_TAG'
  tags:
    - docker

.deploy_template:
  stage: deploy
  environment: $ENV
  image: alpine/ansible:2.16.1
  script:
    - mkdir /root/.ssh
    - cat "$SSH_KEY" > /root/.ssh/id_rsa
    - cat "$KNOWN_HOSTS" > /root/.ssh/known_hosts
    - chmod 600 /root/.ssh/id_rsa
    - chmod 600 /root/.ssh/known_hosts
    - ansible-playbook -e dbsder_api_image=$api_docker_image -i ansible/inventory/$ENV.yml ansible/deploy_dbsder.yml --vault-password-file=$ANSIBLE_VAULT_PASS
  tags:
    - docker

deploy_dev:
  variables:
    ENV: dev
  extends: .deploy_template
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_TAG'
      when: on_success
  needs:
    - build_and_push_api

deploy_preprod:
  variables:
    ENV: preprod
  extends: .deploy_template
  rules:
    - if: '$CI_COMMIT_TAG'
      when: manual
  needs:
    - deploy_dev

deploy_prod:
  variables:
    ENV: prod
  extends: .deploy_template
  rules:
    - if: '$CI_COMMIT_TAG'
      when: manual
  needs:
    - deploy_preprod
