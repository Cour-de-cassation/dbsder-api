# API DBSDER

###
# group: PUT /decisions
# @name 200 - Enregistre une décision
PUT {{HOSTNAME}}/{{VERSION}}/decisions
x-api-key: {{NORMALIZATION_API_KEY}}
Content-Type: application/json

{
  "decision": {
    "analysis": {
      "analyse": [
        "someAnalyse"
      ],
      "doctrine": "someDoctrine",
      "link": "someLink",
      "reference": [
        "someReference"
      ],
      "source": "TJ",
      "summary": "someSummary",
      "target": "someTarget",
      "title": [
        "someTitle"
      ]
    },
    "appeals": [
      "01.02-2020"
    ],
    "chamberId": "someChamberId",
    "chamberName": "someChamberName",
    "dateCreation": "2023-06-11",
    "dateDecision": "2023-06-10",
    "decatt": [
      1,
      2
    ],
    "jurisdictionCode": "someJurisdictionCode",
    "jurisdictionId": "someJurisdictionIdTest",
    "jurisdictionName": "someJurisdictionName",
    "labelStatus": "toBeTreated",
    "occultation": {
      "additionalTerms": "someAdditionalTerms",
      "categoriesToOmit": [
        "someCategoriesToOmit"
      ],
      "motivationOccultation": false
    },
    "originalText": "someOriginalText",
    "registerNumber": "someRegisterNumber",
    "solution": "someSolution",
    "sourceId": 5,
    "sourceName": "juritj",
    "publication": [
      "somePublication"
    ],
    "formation": "someFormation",
    "blocOccultation": 1,
    "NAOCode": "someNAOCode",
    "natureAffaireCivil": "someNatureAffaireCivil",
    "natureAffairePenal": "someNatureAffairePenal",
    "codeMatiereCivil": "someCodeMatiereCivil",
    "public": true
  }
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(200);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Decision créée ou mise à jour");
    // });
    //
    // var jsonData = JSON.parse(responseBody);
    // postman.setEnvironmentVariable("ID_DECISION", jsonData._id);
%}

<> ./API DBSDER_responses/200_-_enregistre_une_décision_ca_cc.200.txt
// {{HOSTNAME}}/{{VERSION}}/decisions
<> ./API DBSDER_responses/200_-_enregistre_une_décision_tj.200.txt
// {{HOSTNAME}}/{{VERSION}}/decisions

###
# group: PUT /decisions
# @name 400 - Enregistre une décision sans contenu
PUT {{HOSTNAME}}/{{VERSION}}/decisions
x-api-key: {{NORMALIZATION_API_KEY}}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(400);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Vous devez fournir le champ: decision");
    // });
%}

###
# group: PUT /decisions
# @name 400 - Enregistre une décision avec un contenu invalide
PUT {{HOSTNAME}}/{{VERSION}}/decisions
x-api-key: {{NORMALIZATION_API_KEY}}
Content-Type: application/json

{
  "decision": {
    "analysis": {
      "analyse": [
        "someAnalyse"
      ],
      "doctrine": "someDoctrine",
      "link": "someLink",
      "reference": [
        "someReference"
      ],
      "source": "someSource",
      "summary": "someSummary",
      "target": "someTarget",
      "title": [
        "someTitle"
      ]
    },
    "appeals": [
      "someAppeal"
    ],
    "chamberId": "someChamberId",
    "chamberName": "someChamberName",
    "dateCreation": "someDateCreation",
    "dateDecision": "someDateDecision",
    "decatt": [
      1,
      2
    ],
    "jurisdictionCode": "someJurisdictionCode",
    "jurisdictionId": "someJurisdictionId",
    "jurisdictionName": "someJurisdictionName",
    "labelStatus": "toBeTreated",
    "occultation": {
      "additionalTerms": "someAdditionalTerms",
      "categoriesToOmit": [
        "someCategoriesToOmit"
      ],
      "motivationOccultation": true
    },
    "originalText": "someOriginalText",
    "registerNumber": "someRegisterNumber",
    "solution": "someSolution",
    "sourceId": 1,
    "publication": [
      "somePublication"
    ],
    "formation": "someFormation",
    "blocOccultation": 1,
    "NAOCode": "someNAOCode",
    "natureAffaireCivil": "someNatureAffaireCivil",
    "natureAffairePenal": "someNatureAffairePenal",
    "codeMatiereCivil": "someCodeMatiereCivil"
  }
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(400);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Une ou plusieurs erreurs ont été trouvées sur les propriétés suivantes : sourceName");
    // });
%}

###
# group: PUT /decisions
# @name 401 - Enregistre une décision sans apiKey
PUT {{HOSTNAME}}/{{VERSION}}/decisions
#x-api-key: 
Content-Type: application/json

{
  "decision": {
    "analysis": {
      "analyse": [
        "someAnalyse"
      ],
      "doctrine": "someDoctrine",
      "link": "someLink",
      "reference": [
        "someReference"
      ],
      "source": "TJ",
      "summary": "someSummary",
      "target": "someTarget",
      "title": [
        "someTitle"
      ]
    },
    "appeals": [
      "someAppeal"
    ],
    "chamberId": "someChamberId",
    "chamberName": "someChamberName",
    "dateCreation": "2023-06-11",
    "dateDecision": "2023-06-10",
    "decatt": [
      1,
      2
    ],
    "jurisdictionCode": "someJurisdictionCode",
    "jurisdictionId": "someJurisdictionId",
    "jurisdictionName": "someJurisdictionName",
    "labelStatus": "toBeTreated",
    "occultation": {
      "additionalTerms": "someAdditionalTerms",
      "categoriesToOmit": [
        "someCategoriesToOmit"
      ],
      "motivationOccultation": false
    },
    "originalText": "someOriginalText",
    "registerNumber": "someRegisterNumber",
    "solution": "someSolution",
    "sourceId": 1,
    "sourceName": "TJ",
    "publication": [
      "somePublication"
    ],
    "formation": "someFormation",
    "blocOccultation": 1,
    "NAOCode": "someNAOCode",
    "natureAffaireCivil": "someNatureAffaireCivil",
    "natureAffairePenal": "someNatureAffairePenal",
    "codeMatiereCivil": "someCodeMatiereCivil",
    "public": true
  }
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(401);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Vous n'êtes pas autorisé à appeler cette route");
    // });
%}

###
# group: GET /decisions
# @name 200 - Liste les décisions toBeTreated avec source et période
GET {{HOSTNAME}}/{{VERSION}}/decisions?
    status=toBeTreated&dateDecision=2024-06-10
x-api-key: {{LABEL_API_KEY}}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(200);
    // });
%}

###
# group: GET /decisions
# @name 200 - Liste les décisions toBeTreated avec numero
GET {{HOSTNAME}}/{{VERSION}}/decisions?
    numero=01.02-2020
x-api-key: {{INDEX_API_KEY}}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(200);
    // });
%}

###
# group: GET /decisions
# @name 200 - Liste les décisions à partir du numéro (RG ou pourvoi)
GET {{HOSTNAME}}/{{VERSION}}/decisions?
    numero=42
x-api-key: {{INDEX_API_KEY}}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(200);
    // });
%}

###
# group: GET /decisions
# @name 400 - Liste decisions avec mauvais status
GET {{HOSTNAME}}/{{VERSION}}/decisions?
    status=wrongStatus
x-api-key: {{LABEL_API_KEY}}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(400);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Une ou plusieurs erreurs ont été trouvées sur les propriétés suivantes : status");
    // });
%}

###
# group: GET /decisions
# @name 401 - Liste les décisions sans API Key
GET {{HOSTNAME}}/{{VERSION}}/decisions?
    status=toBeTreated

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(401);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Vous n'êtes pas autorisé à appeler cette route");
    // });
%}

###
# group: GET /decisions
# @name 401 - Liste les décisions avec mauvaise API Key
GET {{HOSTNAME}}/{{VERSION}}/decisions?
    status=toBeTreated
x-api-key: wrongApiKey

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(401);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Vous n'êtes pas autorisé à appeler cette route");
    // });
%}

###
# group: GET /decisions/:id
# @name 200 - Récupère une décision par son ID
GET {{HOSTNAME}}/{{VERSION}}/decisions/66ba0afd645a6471c7862458
x-api-key: {{LABEL_API_KEY}}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(200);
    // });
%}

###
# group: GET /decisions/:id
# @name 404 - Récupère une décision avec son ID inexistant
GET {{HOSTNAME}}/{{VERSION}}/decisions/{{id_1}}
x-api-key: {{LABEL_API_KEY}}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(404);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("La decision n'a pas été trouvée");
    // });
%}

###
# group: GET /decisions-pseudonymisee/:id
# @name 200 - Récupère une décision pseudonymisée par son ID (avec metadonnees personnelles)
GET {{HOSTNAME}}/{{VERSION}}/decisions-pseudonymisees/{{id_2}}?
    avecMetadonneesPersonnelles=true
x-api-key: {{OPENSDER_API_KEY}}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(200);
    // });
    //
%}

###
# group: GET /decisions-pseudonymisee/:id
# @name 200 - Récupère une décision pseudonymisée par son ID (sans metadonnees personnelles)
GET {{HOSTNAME}}/{{VERSION}}/decisions-pseudonymisees/{{id_3}}?
    avecMetadonneesPersonnelles=false
x-api-key: {{INDEX_API_KEY}}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(200);
    // });
    //
%}

###
# group: GET /decisions-pseudonymisee/:id
# @name 404 - Récupère une décision pseudonymisée avec un ID inexistant (sans metadonnees personnelles)
GET {{HOSTNAME}}/{{VERSION}}/decisions-pseudonymisees/{{id_4}}?
    avecMetadonneesPersonnelles=false
x-api-key: {{INDEX_API_KEY}}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(404);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("La decision n'a pas été trouvée");
    // });
%}

###
# group: GET /decisions-pseudonymisee/:id
# @name 401 - Récupère une decision pseudonymisee par son id sans API Key
GET {{HOSTNAME}}/{{VERSION}}/decisions-pseudonymisees/{{id_5}}?
    avecMetadonneesPersonnelles=false

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(401);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Vous n'êtes pas autorisé à appeler cette route");
    // });
%}

###
# group: GET /decisions-pseudonymisee/:id
# @name 401 - Récupère une decision pseudonymisee par son id avec metadonnées personnelles  avec une  API Key invalide
GET {{HOSTNAME}}/{{VERSION}}/decisions-pseudonymisees/{{id_6}}?
    avecMetadonneesPersonnelles=true
x-api-key: {{INDEX_API_KEY}}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(401);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Vous n'êtes pas autorisé à appeler cette route");
    // });
%}

###
# group: GET /decisions-pseudonymisee/:id
# @name 401 - Récupère une decision pseudonymisee par son id avec une  API Key invalide
GET {{HOSTNAME}}/{{VERSION}}/decisions-pseudonymisees/{{id_7}}?
    avecMetadonneesPersonnelles=false
x-api-key: {{LABEL_API_KEY}}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(401);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Vous n'êtes pas autorisé à appeler cette route");
    // });
%}

###
# group: PUT /decisions/:id/statut
# @name 204 - Met à jour le statut d'une décision
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_8}}/statut
x-api-key: {{LABEL_API_KEY}}
Content-Type: application/json

{
  "statut": "loaded"
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(204);
    // });
%}

###
# group: PUT /decisions/:id/statut
# @name 400 - Met à jour le statut d'une décision avec un statut inexact
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_9}}/statut
x-api-key: {{LABEL_API_KEY}}
Content-Type: application/json

{
  "statut": "wrongStatus"
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(400);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Validation failed (enum string is expected)");
    // });
%}

###
# group: PUT /decisions/:id/statut
# @name 401 - Met à jour avec une API Key inexistante
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_10}}/statut
x-api-key: wrongAPIKey
Content-Type: application/json

{
  "statut": "loaded"
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(401);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Vous n'êtes pas autorisé à appeler cette route");
    // });
%}

###
# group: PUT /decisions/:id/statut
# @name 401 - Met à jour sans API Key
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_11}}/statut
Content-Type: application/json

{
  "statut": "loaded"
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(401);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Vous n'êtes pas autorisé à appeler cette route");
    // });
%}

###
# group: PUT /decisions/:id/statut
# @name 401 - Met à jour avec une API Key non autorisée
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_12}}/statut
x-api-key: {{OPS_API_KEY}}
Content-Type: application/json

{
  "statut": "loaded"
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(401);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Vous n'êtes pas autorisé à appeler cette route");
    // }); 
%}

###
# group: PUT /decisions/:id/statut
# @name 404 - Met à jour le statut d'une décision avec ID inexistant
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_13}}/statut
x-api-key: {{LABEL_API_KEY}}
Content-Type: application/json

{
  "statut": "loaded"
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(404);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("La decision n'a pas été trouvée");
    // });
%}

###
# group: PUT /decisions/:id/decision-pseudonymisee
# @name 204 - Met à jour la décision pseudonymisée d'une décision
PUT {{HOSTNAME}}/{{VERSION}}/decisions/66ba0bdf645a6471c78624cd/decision-pseudonymisee
x-api-key: {{LABEL_API_KEY}}
Content-Type: application/json

{
  "decisionPseudonymisee": "contenu de la décision pseudonymisée"
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(204);
    // });
%}

###
# group: PUT /decisions/:id/decision-pseudonymisee
# @name 400 - Met à jour la décision pseudonymisée d'une décision avec un format incorrect
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_15}}/decision-pseudonymisee
x-api-key: {{LABEL_API_KEY}}
Content-Type: application/json

{
  "decisionPseudonymisee": 1234
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(400);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Une ou plusieurs erreurs ont été trouvées sur les propriétés suivantes : decisionPseudonymisee");
    // });
%}

###
# group: PUT /decisions/:id/decision-pseudonymisee
# @name 401 - Met à jour avec une API Key inexistante
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_16}}/decision-pseudonymisee
x-api-key: wrongAPIKey
Content-Type: application/json

{
  "decisionPseudonymisee": "contenu de la décision pseudonymisée"
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(401);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Vous n'êtes pas autorisé à appeler cette route");
    // });
%}

###
# group: PUT /decisions/:id/decision-pseudonymisee
# @name 401 - Met à jour sans API Key
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_17}}/decision-pseudonymisee
Content-Type: application/json

{
  "decisionPseudonymisee": "contenu de la décision pseudonymisée"
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(401);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Vous n'êtes pas autorisé à appeler cette route");
    // });
%}

###
# group: PUT /decisions/:id/decision-pseudonymisee
# @name 401 - Met à jour avec une API Key non autorisée
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_18}}/decision-pseudonymisee
x-api-key: {{OPS_API_KEY}}
Content-Type: application/json

{
  "decisionPseudonymisee": "contenu de la décision pseudonymisée"
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(401);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Vous n'êtes pas autorisé à appeler cette route");
    // }); 
%}

###
# group: PUT /decisions/:id/decision-pseudonymisee
# @name 404 - Met à jour la décision pseudonymisée d'une décision avec ID inexistant
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_19}}/decision-pseudonymisee
x-api-key: {{LABEL_API_KEY}}
Content-Type: application/json

{
  "decisionPseudonymisee": "contenu de la décision pseudonymisée"
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(404);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("La decision n'a pas été trouvée");
    // });
%}

###
# group: PUT /decisions/:id/rapports-occultations
# @name 204 - Met à jour les rapports d'occultations d'une décision
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_20}}/rapports-occultations
x-api-key: {{LABEL_API_KEY}}
Content-Type: application/json

{
  "rapportsOccultations": [
    {
      "annotations": [
        {
          "category": "some-category",
          "entityId": "some-entity-id",
          "start": 1,
          "text": "some-text",
          "certaintyScore": 80
        }
      ],
      "source": "some-source",
      "order": 1
    }
  ]
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(204);
    // });
%}

###
# group: PUT /decisions/:id/rapports-occultations
# @name 400 - Met à jour les rapports d'occultations d'une décision avec un format incorrect
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_21}}/rapports-occultations
x-api-key: {{LABEL_API_KEY}}
Content-Type: application/json

{
  "rapportsOccultations": [
    {
      "annotations": [
        {
          "category": "some-category",
          "entityId": "some-entity-id",
          "start": 1,
          "text": "some-text",
          "certaintyScore": "80"
        }
      ],
      "order": 1
    }
  ]
}

###
# group: PUT /decisions/:id/rapports-occultations
# @name 401 - Met à jour avec une API Key inexistante
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_22}}/rapports-occultations
x-api-key: wrongAPIKey
Content-Type: application/json

{
  "rapportsOccultations": [
    {
      "annotations": [
        {
          "category": "some-category",
          "entityId": "some-entity-id",
          "start": 1,
          "text": "some-text",
          "certaintyScore": 80
        }
      ],
      "source": "some-source",
      "order": 1
    }
  ]
}

###
# group: PUT /decisions/:id/rapports-occultations
# @name 401 - Met à jour sans API Key
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_23}}/rapports-occultations
Content-Type: application/json

{
  "rapportsOccultations": [
    {
      "annotations": [
        {
          "category": "some-category",
          "entityId": "some-entity-id",
          "start": 1,
          "text": "some-text",
          "certaintyScore": 80
        }
      ],
      "source": "some-source",
      "order": 1
    }
  ]
}

###
# group: PUT /decisions/:id/rapports-occultations
# @name 401 - Met à jour avec une API Key non autorisée
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_24}}/rapports-occultations
x-api-key: {{OPS_API_KEY}}
Content-Type: application/json

{
  "rapportsOccultations": [
    {
      "annotations": [
        {
          "category": "some-category",
          "entityId": "some-entity-id",
          "start": 1,
          "text": "some-text",
          "certaintyScore": 80
        }
      ],
      "source": "some-source",
      "order": 1
    }
  ]
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(401);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("Vous n'êtes pas autorisé à appeler cette route");
    // });
%}

###
# group: PUT /decisions/:id/rapports-occultations
# @name 404 - Met à jour les rapports d'occultations d'une décision avec ID inexistant
PUT {{HOSTNAME}}/{{VERSION}}/decisions/{{id_25}}/rapports-occultations
x-api-key: {{LABEL_API_KEY}}
Content-Type: application/json

{
  "rapportsOccultations": [
    {
      "annotations": [
        {
          "category": "some-category",
          "entityId": "some-entity-id",
          "start": 1,
          "text": "some-text",
          "certaintyScore": 80
        }
      ],
      "source": "some-source",
      "order": 1
    }
  ]
}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(404);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("La decision n'a pas été trouvée");
    // });
%}

###
# group: DELETE /decisions/:id
# @name 204 - Supprime une décision par son ID
DELETE {{HOSTNAME}}/{{VERSION}}/decisions/{{id_26}}
x-api-key: {{OPS_API_KEY}}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(204);
    // });
%}

###
# group: DELETE /decisions/:id
# @name 404 - Supprime une décision avec son ID inexistant
DELETE {{HOSTNAME}}/{{VERSION}}/decisions/{{id_27}}
x-api-key: {{OPS_API_KEY}}

> {%
    // TODO: migrate to HTTP Client Response handler API
    // pm.test("statusCode", function(){
    //     pm.response.to.have.status(404);
    // });
    //
    // pm.test("message", function(){
    //     pm.expect(pm.response.json().message).to.eql("La decision n'a pas été trouvée");
    // });
%}

###
# @name 200 - Consulte l'état de l'API
GET {{HOSTNAME}}/{{VERSION}}/health
x-api-key: {{OPS_API_KEY}}

###
# @name Accède à la documentation
GET {{HOSTNAME}}/doc-json
Authorization: Basic {{DOC_LOGIN}} {{DOC_PASSWORD}}